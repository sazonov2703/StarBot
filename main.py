import os
import uuid
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiohttp import web
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
ADMIN_GROUP_ID = os.getenv('ADMIN_GROUP_ID')

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç–µ–π—Ç—ã –¥–ª—è FSM
class OrderStates(StatesGroup):
    GET_TARGET_USERNAME = State()
    GET_QUANTITY = State()
    GET_PAYMENT_METHOD = State()
    TOTAL_VALUE = State()
    CONFIRMATION = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
orders = {}

# –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
rate = 1.7

# –ö–æ–º–∏—Å—Å–∏—è
commission = 1

# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
PAYMENT_METHODS = [
    "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
    "üì± –ÆMoney",
    "ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)",
    "‚úèÔ∏è –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±"
]

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
QUANTITY_OPTIONS = [50, 100, 250, 500, 1000]

@dp.message(Command('start'))
async def start_cmd(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"))
    builder.add(types.KeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"))
    await message.answer(
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–≤—ë–∑–¥!</b>",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )

@dp.message(F.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
async def show_reviews(message: types.Message):
    await message.answer("üîç –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã: https://t.me/fasters_tg_feedback")

@dp.message(F.text == "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message, state: FSMContext):
    await state.set_state(OrderStates.GET_TARGET_USERNAME)
    
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîπ –ü–æ–∫—É–ø–∞—é —Å–µ–±–µ"))
    builder.adjust(1)
    
    await message.answer(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b> (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –µ—Å–ª–∏ –ø–æ–∫—É–ø–∞–µ—Ç–µ —Å–µ–±–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )

@dp.message(OrderStates.GET_TARGET_USERNAME)
async def get_username(message: types.Message, state: FSMContext):
    if message.text == "üîπ –ü–æ–∫—É–ø–∞—é —Å–µ–±–µ":
        username = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
        await state.update_data(target_username=username)
    elif not message.text.startswith("@"):
        await message.answer("‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @!")
        return
    else:
        await state.update_data(target_username=message.text)
    
    await state.set_state(OrderStates.GET_QUANTITY)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
    builder = ReplyKeyboardBuilder()
    for qty in QUANTITY_OPTIONS:
        builder.add(types.KeyboardButton(text=str(qty)))
    builder.adjust(3)
    
    await message.answer(
        "üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë</b> (–æ—Ç 50):",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )

@dp.message(OrderStates.GET_QUANTITY)
async def get_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 50:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 50!")
        return
        
    await state.update_data(quantity=message.text)
    await state.set_state(OrderStates.GET_PAYMENT_METHOD)

    await state.update_data(total_value=int(message.text) * rate * commission)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    builder = ReplyKeyboardBuilder()
    for method in PAYMENT_METHODS:
        builder.add(types.KeyboardButton(text=method))
    builder.adjust(2)
    
    await message.answer(
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )

@dp.message(OrderStates.GET_PAYMENT_METHOD)
async def get_payment_method(message: types.Message, state: FSMContext):
    payment_method = message.text
    user_data = await state.get_data()

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±", –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
    if payment_method == "‚úèÔ∏è –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±":
        await message.answer(
            "‚úèÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode="HTML"
        )
        return

    # –†–∞—Å—á—ë—Ç —Å—É–º–º—ã
    quantity = int(user_data["quantity"])
    total_value = quantity * rate * commission

    order_id = str(uuid.uuid4())
    
    order_data = {
        "order_id": order_id,
        "user_id": message.from_user.id,
        "target_username": user_data['target_username'],
        "quantity": quantity,
        "payment_method": payment_method,
        "total_value": round(total_value, 2)  # –æ–∫—Ä—É–≥–ª–∏–º –¥–æ –∫–æ–ø–µ–µ–∫
    }

    orders[order_id] = order_data
    await state.update_data(order_id=order_id)
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(
        "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    
    summary = (
    "üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n"
    f"üéØ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {user_data['target_username']}\n"
    f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {user_data['quantity']}\n"
    f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_method}\n"
    f"üí∏ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {order_data['total_value']:.2f} ‚ÇΩ\n"
    "<i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑</i>"
)
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=f"confirm_{order_id}"))
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data=f"cancel_{order_id}"))
    builder.adjust(2)
    
    await state.set_state(OrderStates.CONFIRMATION)
    await message.answer(
        summary,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("confirm_"), OrderStates.CONFIRMATION)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    order_id = callback.data.split("_")[1]
    order_data = orders.get(order_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–Ω–æ–≤–æ
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"))
    builder.add(types.KeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"))

    if not order_data:
        await callback.message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_msg = (
        "üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n"
        f"üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{order_data['order_id']}</code>\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{callback.from_user.username or '–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
        f"üÜî <b>User ID:</b> <code>{order_data['user_id']}</code>\n"
        f"üéØ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {order_data['target_username']}\n"
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order_data['quantity']}\n"
        f"üí∏ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {order_data['total_value']:.2f} ‚ÇΩ\n"
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {order_data['payment_method']}"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_builder = InlineKeyboardBuilder()
    admin_builder.add(types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=f"admin_approve_{order_id}"))
    admin_builder.add(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"admin_reject_{order_id}"))
    admin_builder.add(types.InlineKeyboardButton(
        text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
        url=f"tg://user?id={order_data['user_id']}"))
    admin_builder.adjust(2, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=admin_msg,
        reply_markup=admin_builder.as_markup(),
        parse_mode="HTML"
    )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
       f"üí∏ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω</b>",
       parse_mode="HTML",
       reply_markup=builder.as_markup(resize_keyboard=True)
    )

    # üì© –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º ID –∏ —Å—Å—ã–ª–∫–æ–π
    await callback.message.answer(
        f"üí∏ <b>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏</b> –ø–µ—Ä–µ—à–ª–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n"
        f"<code>{order_id}</code>\n"
        f"üëâ <a href='https://t.me/fasters_admin'>–°—é–¥–∞</a> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏)",
        parse_mode="HTML"
    )

    await state.clear()
    del orders[order_id]

@dp.callback_query(F.data.startswith("cancel_"), OrderStates.CONFIRMATION)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    order_id = callback.data.split("_")[1]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"))
    builder.add(types.KeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"))

    await callback.message.answer(
        f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    
    await state.clear()
    if order_id in orders:
        del orders[order_id]

@dp.callback_query(F.data.startswith("admin_approve_"))
async def admin_approve_order(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[2]
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
    approved_msg = (
        "‚úÖ <b>–ó–ê–ö–ê–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>\n\n" +
        callback.message.text.split("\n\n", 1)[1]  # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    )
    
    await bot.send_message(
        chat_id=ADMIN_GROUP_ID,
        text=approved_msg,
        parse_mode="HTML"
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!")

@dp.callback_query(F.data.startswith("admin_reject_"))
async def admin_reject_order(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[2]
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
    await callback.message.delete()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω", show_alert=True)

# –í–µ–± —Å–µ—Ä–≤–µ—Ä
async def handle_ping(request):
    print("/ping recieved")
    return web.Response(text="OK")

# –í–µ–± —Å–µ—Ä–≤–µ—Ä
async def start_web():
    app = web.Application()
    app.router.add_get('/ping', handle_ping)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.getenv("PORT", 8080)))
    await site.start()

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await start_web()
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())